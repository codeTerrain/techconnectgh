<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Person extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Person_model');
    } 

    /*
     * Listing of person
     */
    function index()
    {
        $data['person'] = $this->Person_model->get_all_person();
        $data['_view'] = 'person/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new person
     */
    function add()
    
    {  
        
        $data['person_companies'] = $this ->Person_model-> get_associatedCompany(); 
        
    
        $this->load->library('form_validation');
        if ($this->input->post('person_company') == '#' || $this->input->post('person_company') == ''){
            
            $specifics = $this->input->post('specify');
            if ($specifics == NULL){
                echo form_error('specify');
                //TOdo code for non listed companies wit a null text area
            }
            else{
$specific=$specifics;
            }
        
      }
        else {
            $specific = $this->input->post('person_company');
            
        }

		$this->form_validation->set_rules('salutation','Salutation','required');
		$this->form_validation->set_rules('last_name','Last Name','required|max_length[150]');
		$this->form_validation->set_rules('first_name','First Name','required|max_length[200]');
		$this->form_validation->set_rules('other_name','Other Name','max_length[200]');
		$this->form_validation->set_rules('phone','Phone','required|max_length[15]');
		$this->form_validation->set_rules('email','Email','required|max_length[500]|valid_email');
		$this->form_validation->set_rules('postal_address','Postal Address','required|max_length[45]');
		$this->form_validation->set_rules('website','Website','max_length[100]');
		$this->form_validation->set_rules('linkedIn','LinkedIn','max_length[100]');
		$this->form_validation->set_rules('facebook','Facebook','max_length[100]');
		$this->form_validation->set_rules('educational_level','Educational Level','required');
		$this->form_validation->set_rules('marital_status','Marital Status','required');
		$this->form_validation->set_rules('date_of_birth','Date Of Birth','required');
		$this->form_validation->set_rules('person_company','person_company', 'required');
		
		if($this->form_validation->run())     
        {   
            $con = mysqli_connect("localhost", "root", "", "tech_connect");
          
            $query = "select max(id) from person";
            
            $result = mysqli_query($con, $query);
            $rows= mysqli_fetch_assoc($result);
            $nextId = sprintf("%04s", ($rows['max(id)'] +1));

            $person_id = substr($this->input->post('first_name'),0,3).date("ymd")."-".$nextId;
            



           
            $params = array(
				'salutation' => $this->input->post('salutation'),
				'educational_level' => $this->input->post('educational_level'),
				'marital_status' => $this->input->post('marital_status'),
				'date_of_birth' => $this->input->post('date_of_birth'),
				'last_name' => $this->input->post('last_name'),
				'first_name' => $this->input->post('first_name'),
				'other_name' => $this->input->post('other_name'),
				'phone' => $this->input->post('phone'),
				'email' => $this->input->post('email'),
				'postal_address' => $this->input->post('postal_address'),
				'website' => $this->input->post('website'),
				'linkedIn' => $this->input->post('linkedIn'),
                'facebook' => $this->input->post('facebook'),
                'person_id'=> $person_id,
                'associatedCompanyId' => $specific,
            );
            
        
            $person_id = $this->Person_model->add_person($params);
            redirect('person/index');
        }
        else
        {            
            $data['_view'] = 'person/add';
            $this->load->view('layouts/main',$data);
        }
    }  
   
    function edit($person_id)
    {   
        // check if the person exists before trying to edit it
        $data['person'] = $this->Person_model->get_person($person_id);
        $data['person_companies'] = $this ->Person_model-> get_associatedCompany(); 
        
    
       
        if(isset($data['person']['person_id']))
        {
            $this->load->library('form_validation');
           
            if ($this->input->post('person_company') == '#' || $this->input->post('person_company') == ''){
                
                $specifics = $this->input->post('specify');
                if ($specifics == NULL){
                    echo form_error('specify');
                    //TOdo code for non listed companies wit a null text area
                }
                else{
    $specific=$specifics;
                }
            
          }
            else {
                $specific = $this->input->post('person_company');
                
            }
    

			$this->form_validation->set_rules('salutation','Salutation','required');
			$this->form_validation->set_rules('last_name','Last Name','required|max_length[150]');
			$this->form_validation->set_rules('first_name','First Name','required|max_length[200]');
			$this->form_validation->set_rules('other_name','Other Name','max_length[200]');
			$this->form_validation->set_rules('phone','Phone','required|max_length[15]');
			$this->form_validation->set_rules('email','Email','required|max_length[500]|valid_email');
			$this->form_validation->set_rules('postal_address','Postal Address','required|max_length[45]');
			$this->form_validation->set_rules('website','Website','max_length[100]');
			$this->form_validation->set_rules('linkedIn','LinkedIn','max_length[100]');
			$this->form_validation->set_rules('facebook','Facebook','max_length[100]');
			$this->form_validation->set_rules('educational_level','Educational Level','required');
			$this->form_validation->set_rules('marital_status','Marital Status','required');
			$this->form_validation->set_rules('date_of_birth','Date Of Birth','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'salutation' => $this->input->post('salutation'),
					'educational_level' => $this->input->post('educational_level'),
					'marital_status' => $this->input->post('marital_status'),
					'date_of_birth' => $this->input->post('date_of_birth'),
					'last_name' => $this->input->post('last_name'),
					'first_name' => $this->input->post('first_name'),
					'other_name' => $this->input->post('other_name'),
					'phone' => $this->input->post('phone'),
					'email' => $this->input->post('email'),
					'postal_address' => $this->input->post('postal_address'),
					'website' => $this->input->post('website'),
					'linkedIn' => $this->input->post('linkedIn'),
                    'facebook' => $this->input->post('facebook'),
                    'associatedCompanyId' => $specific,

                );

                $this->Person_model->update_person($person_id,$params);            
                redirect('person/index');
            }
            else
            {
                $data['_view'] = 'person/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The person you are trying to edit does not exist.');
    } 

    /*
     * Deleting person
     */
    function remove($person_id)
    {
        $person = $this->Person_model->get_person($person_id);

        // check if the person exists before trying to delete it
        if(isset($person['person_id']))
        {
            $this->Person_model->delete_person($person_id);
            redirect('person/index');
        }
        else
            show_error('The person you are trying to delete does not exist.');
    }
    
}
