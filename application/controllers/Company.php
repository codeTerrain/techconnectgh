<?php

/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Company extends CI_Controller{
    

    function __construct()
    {
        parent::__construct();
        $this->load->model('Person_model');  
        $this->load->model('Company_model');        
              
    } 

   
// the "TRUE" argument tells it to return the content, rather than display it immediately



    /*
     * Listing of company
     */
    function index()
    {
        
                $data['company'] = $this->Company_model->get_all_company();
                $data['person'] = $this->Person_model->get_all_person();
       
                
                
                $data['_view'] = 'company/inner';
                $this->load->view('layouts/main',$data);
                
    
        
    }

       
    /*
     * Adding a new company
     */

    function add()
   


    


    {   
        
        $this->load->library('form_validation');

	
		$this->form_validation->set_rules('company_name','Company Name','required|max_length[100]');
		$this->form_validation->set_rules('geolocation','Geolocation','required|max_length[50]');
	    $this->form_validation->set_rules('email','Email','required|max_length[500]|valid_email');
	    $this->form_validation->set_rules('phone','Phone','required|max_length[15]');
		$this->form_validation->set_rules('website','Website','required|max_length[100]');
		$this->form_validation->set_rules('physical_address','Physical Address','max_length[100]');
		$this->form_validation->set_rules('postal_address','Postal Address','required|max_length[100]');
		$this->form_validation->set_rules('company_type','Company Type','required|max_length[45]');
		$this->form_validation->set_rules('profile','Profile','required|max_length[500]');
        $this->form_validation->set_rules('company_size','Company Size','required|integer');
        $this->form_validation->set_rules('industry','Industry','required');
        $this->form_validation->set_rules('path_of_file','path_of_file','required');
        $this->form_validation->set_rules('type_of_document','type_of_document','required|max_length[500]');

       
		if($this->form_validation->run())     
        {   


           $con = mysqli_connect("localhost", "root", "", "tech_connect");
          
            $query = "select max(id) from company";
            
            $result = mysqli_query($con, $query);
            $rows= mysqli_fetch_assoc($result);
            $nextId = sprintf("%04s", ($rows['max(id)'] +1));

            $company_id = substr($this->input->post('company_name'),0,3).date("ymd")."-".$nextId;
            
            
            $params = array(
                
				'industry' => $this->input->post('industry'),
				'company_id' => $company_id,
				'company_name' => $this->input->post('company_name'),
				'geolocation' => $this->input->post('geolocation'),
				'email' => $this->input->post('email'),
				'phone' => $this->input->post('phone'),
				'website' => $this->input->post('website'),
				'physical_address' => $this->input->post('physical_address'),
				'postal_address' => $this->input->post('postal_address'),
				'company_type' => $this->input->post('company_type'),
				'profile' => $this->input->post('profile'),
                'company_size' => $this->input->post('company_size'),
                'path_of_file' => $this->input->post('path_of_file'),
				'type_of_document' => $this->input->post('type_of_document'),
                
            );
           
           

            
            
                
                          //add company 
                        $company_id = $this->Company_model->add_company($params);
            redirect('company/index');
            $business_registration_info_id = $this->Business_registration_info_model->add_bus($params1);
            redirect('business_registration_info/index');
                    

                   
            
        
        }
        
        else
        {   
            
    
            $data['_view'] = 'company/add';
            $this->load->view('layouts/main',$data);

        }

           
            
    
            
           
        
    }  



   



    

    /*
     * Editing a company
     */
    function edit($company_id)
    {   
        // check if the company exists before trying to edit it
        $data['company'] = $this->Company_model->get_company($company_id);
        
        if(isset($data['company']['company_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('company_name','Company Name','required|max_length[100]');
		$this->form_validation->set_rules('geolocation','Geolocation','required|max_length[50]');
	    $this->form_validation->set_rules('email','Email','required|max_length[500]|valid_email');
	    $this->form_validation->set_rules('phone','Phone','required|max_length[15]');
		$this->form_validation->set_rules('website','Website','required|max_length[100]');
		$this->form_validation->set_rules('physical_address','Physical Address','max_length[100]');
		$this->form_validation->set_rules('postal_address','Postal Address','required|max_length[100]');
		$this->form_validation->set_rules('company_type','Company Type','required|max_length[45]');
		$this->form_validation->set_rules('profile','Profile','required|max_length[500]');
        $this->form_validation->set_rules('company_size','Company Size','required|integer');
        $this->form_validation->set_rules('industry','Industry','required');
        $this->form_validation->set_rules('company_id','Company_id','required');
     


		
        if($this->form_validation->run())     
        {   


          /* $con = mysqli_connect("localhost", "root", "", "tech_connect");
          
            $query = "select max(id) from company";
            
            $result = mysqli_query($con, $query);
            $rows= mysqli_fetch_assoc($result);
            $nextId = sprintf("%04s", ($rows['max(id)'] +1));

            $company_id = substr($this->input->post('company_name'),0,3).date("ymd")."-".$nextId; */

            $params = array(
				'industry' => $this->input->post('industry'),
				'company_id' => $this->input->post('spec'),
				'company_name' => $this->input->post('company_name'),
				'geolocation' => $this->input->post('geolocation'),
				'email' => $this->input->post('email'),
				'phone' => $this->input->post('phone'),
				'website' => $this->input->post('website'),
				'physical_address' => $this->input->post('physical_address'),
				'postal_address' => $this->input->post('postal_address'),
				'company_type' => $this->input->post('company_type'),
				'profile' => $this->input->post('profile'),
                'company_size' => $this->input->post('company_size'),
                
                
            );
         

                $this->Company_model->update_company($company_id,$params);            
                redirect('company/index');
            }
            else
            {
                $data['_view'] = 'company/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The company you are trying to edit does not exist.');
    } 




    function addMember($id)
    {   
        // check if the company exists before trying to edit it
        $data['company'] = $this->Company_model->get_company($id);
        
        if(isset($data['company']['company_id']))
        {
            $this->load->library('form_validation');

		$this->form_validation->set_rules('salutation','Salutation','required');
		$this->form_validation->set_rules('last_name','Last Name','required|max_length[150]');
		$this->form_validation->set_rules('first_name','First Name','required|max_length[200]');
		$this->form_validation->set_rules('other_name','Other Name','max_length[200]');
		$this->form_validation->set_rules('phone','Phone','required|max_length[15]');
		$this->form_validation->set_rules('email','Email','required|max_length[500]|valid_email');
		$this->form_validation->set_rules('postal_address','Postal Address','required|max_length[45]');
		$this->form_validation->set_rules('website','Website','max_length[100]');
		$this->form_validation->set_rules('linkedIn','LinkedIn','max_length[100]');
		$this->form_validation->set_rules('facebook','Facebook','max_length[100]');
		$this->form_validation->set_rules('educational_level','Educational Level','required');
		$this->form_validation->set_rules('marital_status','Marital Status','required');
		$this->form_validation->set_rules('date_of_birth','Date Of Birth','required');
		//$this->form_validation->set_rules('person_company','person_company', 'required');
		


		
        if($this->form_validation->run())     
        {   
            $con = mysqli_connect("localhost", "root", "", "tech_connect");
          
            $query = "select max(id) from person";
            
            $result = mysqli_query($con, $query);
            $rows= mysqli_fetch_assoc($result);
            $nextId = sprintf("%04s", ($rows['max(id)'] +1));

            $person_id = substr($this->input->post('first_name'),0,3).date("ymd")."-".$nextId;
            



           
            $params = array(
				'salutation' => $this->input->post('salutation'),
				'educational_level' => $this->input->post('educational_level'),
				'marital_status' => $this->input->post('marital_status'),
				'date_of_birth' => $this->input->post('date_of_birth'),
				'last_name' => $this->input->post('last_name'),
				'first_name' => $this->input->post('first_name'),
				'other_name' => $this->input->post('other_name'),
				'phone' => $this->input->post('phone'),
				'email' => $this->input->post('email'),
				'postal_address' => $this->input->post('postal_address'),
				'website' => $this->input->post('website'),
				'linkedIn' => $this->input->post('linkedIn'),
                'facebook' => $this->input->post('facebook'),
                'person_id'=> $person_id,
                'associatedCompanyId' => $this->input->post('spec'),
            );
            
        
            $person_id = $this->Person_model->add_person($params);
            redirect('person/index');
        }
            else
            {
                $data['_view'] = 'person/addMember';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The person you are trying to edit does not exist.');
    } 

    /*
     * Deleting company
     */
    function remove($id)
    {
        $company = $this->Company_model->get_company($id);

        // check if the company exists before trying to delete it
        if(isset($company['company_id']))
        {
            $this->Company_model->delete_company($id);
            redirect('dashboard/index');
        }
        else
            show_error('The company you are trying to delete does not exist.');
    }
}



/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
